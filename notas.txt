- IMPORTANTE! o projeto maven que contém todos os modulos deve ser ser compilados com:
mvn clean:clean resources:resources compiler:compile jar:jar install:install -DskipTest:true

- modulo jts-app contém a gui
- modulo test contem o test runner (um programa que permite carregar fihceiros .wkt e apresentar a geometria neles definida
- modulo example contém exemplos de código para criação de formas (polyline, polygon...) 
e operações com as mesmas (interseção,...)
- modulo app contem o testBuilder, uma gui mais completa que permite fazer operações com geometrias 2D
- no modulo app, package org.locationtech.jttest.testbuilder a classe JTSTstBuilder permite correr o testBuilder com a gui.
No entanto, a classe que carrega os icones a apresentar na gui verifica o diretório de resources no /modules/app/target/classes/,
no entanto sem o goal resources:resources estes não são copiados do diretório /modules/app/source/main/resources/ 
para o /modules/app/target/classes/
- projeto "app" package "render" contem a classe GeomtryPaint metodo paint, que pega num objeto Geometry e o desenha na gui
- projeto "app" package "ui.style" tem a classe basic style, que permite definir a cor da linha e do preenchimento da 
geometria e desenhá-la
- gesture finished.., classe rectangle tool
- JTSTestBuilderFrame, pode-se alterar lá o factor de zoom.
- Viewport: setOrigin é chamado sempre que se faz zoom, e pode ser a causa de a origem ficar desfasada

-JTSTestBuilderFrame: carrega os componentes da janela


Alterações
- Apresentada uma janela de escolha de ficheiros quando se corre o programa (usado para escolher uma imagem). Alteração 
feita no main da classe JTSTestBuilder do package "testbuilder", do modulo "app"
- GeometryEditPanel: colocada imagem como fundo de ecrã (metodo paintComponent e repaintComponent para atualizar em eventos)
- AppImage: classe que tem a imagem de fundo e métodos estaticos que permite manter o seu aspect ratio
- A imagem mantem agora o seu aspect ratio quando a janela é resized
- GridRenderer: atributo isEnabled colocado a false para nao apresentar grelha
- RenderManager: metodo erase, usado para atualizar o que é apresentado no edit panel. Agora é chamada a função "paintComponent"
do GeometryEditPanel, que redesenha a imagem por cima.
- adicionado botao que mostra/esconde a grid. classe JTSTestBuilderToolbar tem o botao btnShowHideGrid, com o evento de clique
"btnShowHideGrid_actionPerformed" na classe JTSTestBuilderFrame.

-adicionado classe PointUtils e CoordUtils, no projeto "core", package "geometry", com a transformada de pontos e coordenadas
 respetivamente...
- criada classe no projeto "core", package "io", chamada CorrReader, que faz o parsing dos ficheiros de .corr
para um array de Coordenate.
- no projeto "app", package "util.io", foi criada classe CorrToGeometries, que permite converter um polygon a partir de um
Coordinate[]. Caso o Coordinate[] não seja fechado (ultimas coordenadas iguais ás primeiras, existe um metodo que irá fechar
as coordenadas).
-  GeometryEditPanel, adicionado metodo drawGeometry, que recebe o conjunto de coordenadas de um ficheiro e
chama métodos para transformar as coordenadas da imagem original para o tamanho da janela, e desenhar o poligono, removendo
primeiro quaisquer desenhos que lá existam.
Este método é chamado no main da classe JTSTestBuilder e também no metodo componentResized sempre a janela muda
as suas dimensões.
- na classe ViewPort, em setOrigin, foi adicionado um if que verifica a escala do view port.. se for 1,
ou seja não há zoom, entao a origem será o 0,0, resolvendo assim o problema da origem (em principio..)
- Agora a imagem é colocada nos pontos -x, e -y, correspondentes as coordenadas do painel do canto inferior esquerdo
(para corrigir desfasamentos de geometria e imagem)


---> todo:
- á medida que se faz zoom a imagem e a geometria ficam mais desfasadas, mesmo apos mover a imagem 
de posição de acordo com o zoom aplicado

