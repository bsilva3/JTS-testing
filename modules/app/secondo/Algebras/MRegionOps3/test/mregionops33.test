#
# MRegionOps3Algebra-Testfile
#
# November 2017, U. Wiesecke
#
# *
# * Note: Call this testscript as follows:
# * TestRunner --no-tmp -i ../Algebras/MRegionOps3/test/mregionops33.test
# *
################################################################################
# *
# * Preparing the test database
# *
################################################################################
#testcase restore database berlintest from berlintest;
#yields success
#restore database berlintest from berlintest;
#testcase open database berlintest
#yields success
open database berlintest;

delete mpC;
delete rC;
delete mrC;
################################################################################
# *
# * Create test data
# *
################################################################################
let mpC =[ const mpoint value 
 ((("2003-11-20-06:00" "2003-11-20-09:00" TRUE TRUE) (0.0 0.0 0.0 0.0))) ];
let rC = grunewald;
let mrC = move(mpC, rC);
################################################################################
# *
# * Detailed test, preparation
# *
################################################################################
delete t0A;
delete t0B;
delete t1A;
delete t1B;
delete t0;
delete t1;
delete noSamples;
delete step;
delete samples;
delete tolerance;
delete aUb;
delete aIb;
delete aMb;

let noSamples = 101.0;
let t0A = instant2real(inst(initial(mrC)));
let t0B = instant2real(inst(initial(msnow)));
let t1A = instant2real(inst(final(mrC)));
let t1B = instant2real(inst(final(msnow)));
let t0 = ifthenelse(t0A < t0B, t0A, t0B);
let t1 = ifthenelse(t1A > t1B, t1A, t1B);
let step = (abs(t1 - t0)) / noSamples;
let samples = realstream(t0, t1, step) 
              use[fun(t: real) create_instant(t)] transformstream consume;
let tolerance = 3.0;
################################################################################
# *
# * Detailed test, Union
# *
################################################################################
#testcase mrC union msnow
#yields ()
let aUb = mrC union msnow;

#yields (bool TRUE)
query samples feed transformstream 
use[ fun(t: instant) abs( area(val(aUb atinstant t)) - 
area( val(mrC atinstant t) union val(msnow atinstant t))
)] transformstream max[Elem] < tolerance;
################################################################################
# *
# * Detailed test, Intersection
# *
################################################################################
#testcase intersection(mrC, msnow)
#yields ()
let aIb = intersection(mrC, msnow);

#yields (bool TRUE)
query samples feed transformstream 
use[ fun(t: instant) abs( area(val(aIb atinstant t)) - 
area( intersection(val(mrC atinstant t), val(msnow atinstant t)))
)] transformstream max[Elem] < tolerance;
################################################################################
# *
# * Detailed test, Minus
# *
################################################################################
#testcase mrC minus msnow
#yields ()
let aMb = mrC minus msnow;

#yields (bool TRUE)
query samples feed transformstream 
use[ fun(t: instant) abs( area(val(aMb atinstant t)) - 
area( val(mrC atinstant t) minus val(msnow atinstant t))
)] transformstream max[Elem] < tolerance;
