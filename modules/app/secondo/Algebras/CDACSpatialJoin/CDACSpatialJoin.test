## execute with
## TestRunner -i /home/fapra/secondo/Algebras/CDACSpatialJoin/CDACSpatialJoin.test
## TestRunner --valgrindlc -i /home/fapra/secondo/Algebras/CDACSpatialJoin/CDACSpatialJoin.test

########################################
# INITIALIZATION
########################################
delete database CDACSJTest;

#setup CDACSpatialJoinTest
create database CDACSJTest;
open database CDACSJTest;

let noGeom = [const (rel (tuple ((PLZ int) (Ort string)) )) value ((78267 "Aach") (52092 "Aachen") (73434 "Aalen"))];

let rectBelow1 = [const (rel (tuple ((Bbox rect)) )) value (((-0.99999 0.99999 -0.99999 0.99999)))];

let rect1 = [const (rel (tuple ((Bbox rect)) )) value (((-1 1 -1 1)))];

let rectOver1 = [const (rel (tuple ((Bbox rect)) )) value (((-1.00001 1.00001 -1.00001 1.00001)))];

let rect2 = [const (rel (tuple ((Bbox rect)) )) value (((-2 2 -2 2)))];

let rect100 = [const (rel (tuple ((Bbox rect)) )) value ( ((-2 -1 -2 -1)) ((-2 -1 -2 0)) ((-2 -1 -2 1)) ((-2 -1 -2 2)) ((-2 -1 -1 0)) ((-2 -1 -1 1)) ((-2 -1 -1 2)) ((-2 -1 0 1)) ((-2 -1 0 2)) ((-2 -1 1 2)) ((-2 0 -2 -1)) ((-2 0 -2 0)) ((-2 0 -2 1)) ((-2 0 -2 2)) ((-2 0 -1 0)) ((-2 0 -1 1)) ((-2 0 -1 2)) ((-2 0 0 1)) ((-2 0 0 2)) ((-2 0 1 2)) ((-2 1 -2 -1)) ((-2 1 -2 0)) ((-2 1 -2 1)) ((-2 1 -2 2)) ((-2 1 -1 0)) ((-2 1 -1 1)) ((-2 1 -1 2)) ((-2 1 0 1)) ((-2 1 0 2)) ((-2 1 1 2)) ((-2 2 -2 -1)) ((-2 2 -2 0)) ((-2 2 -2 1)) ((-2 2 -2 2)) ((-2 2 -1 0)) ((-2 2 -1 1)) ((-2 2 -1 2)) ((-2 2 0 1)) ((-2 2 0 2)) ((-2 2 1 2)) ((-1 0 -2 -1)) ((-1 0 -2 0)) ((-1 0 -2 1)) ((-1 0 -2 2)) ((-1 0 -1 0)) ((-1 0 -1 1)) ((-1 0 -1 2)) ((-1 0 0 1)) ((-1 0 0 2)) ((-1 0 1 2)) ((-1 1 -2 -1)) ((-1 1 -2 0)) ((-1 1 -2 1)) ((-1 1 -2 2)) ((-1 1 -1 0)) ((-1 1 -1 1)) ((-1 1 -1 2)) ((-1 1 0 1)) ((-1 1 0 2)) ((-1 1 1 2)) ((-1 2 -2 -1)) ((-1 2 -2 0)) ((-1 2 -2 1)) ((-1 2 -2 2)) ((-1 2 -1 0)) ((-1 2 -1 1)) ((-1 2 -1 2)) ((-1 2 0 1)) ((-1 2 0 2)) ((-1 2 1 2)) ((0 1 -2 -1)) ((0 1 -2 0)) ((0 1 -2 1)) ((0 1 -2 2)) ((0 1 -1 0)) ((0 1 -1 1)) ((0 1 -1 2)) ((0 1 0 1)) ((0 1 0 2)) ((0 1 1 2)) ((0 2 -2 -1)) ((0 2 -2 0)) ((0 2 -2 1)) ((0 2 -2 2)) ((0 2 -1 0)) ((0 2 -1 1)) ((0 2 -1 2)) ((0 2 0 1)) ((0 2 0 2)) ((0 2 1 2)) ((1 2 -2 -1)) ((1 2 -2 0)) ((1 2 -2 1)) ((1 2 -2 2)) ((1 2 -1 0)) ((1 2 -1 1)) ((1 2 -1 2)) ((1 2 0 1)) ((1 2 0 2)) ((1 2 1 2)) 
 )];

########################################
# OPERATOR - createRectangles1D
########################################

#testcase -1.1- createRectangles1D with wrong number of parameters
#yields error
query createRectangles1D(10, 3, 0.4, 0.6, 1, 42) count;

#testcase -1.2- createRectangles1D with wrong type of parameters
#yields error
query createRectangles1D(10.0, 3.1415, 4, 6, "Text") count;

#testcase -1.3- createRectangles1D, creating 10^3 tuples (reproducible)
#yields (int 1000)
query createRectangles1D(10, 3, 0.4, 0.6, 1) count;

#testcase -1.4- createRectangles1D, creating 5^4 tuples (non-reproducible)
#yields (int 625)
query createRectangles1D(5, 4, 0.3, 0.5, 0) count;

#testcase -1.5- createRectangles1D, checking first 3 of 1000^4 tuples
#tolerance_real 0.001
#yields ((rel (tuple ((Bbox rect1))))( \
  ((813.373 867.866)) \
  ((813.322 880.311)) \
  ((805.612 858.401))))
query createRectangles1D(1000, 4, 0.4, 0.6, 1) head[3] consume;


########################################
# OPERATOR - createRectangles2D
########################################

#testcase -2.1- createRectangles2D with wrong number of parameters
#yields error
query createRectangles2D(10, 3, 0.4, 0.6, 1, 42) count;

#testcase -2.2- createRectangles2D with wrong type of parameters
#yields error
query createRectangles2D(10.0, 3.1415, 4, 6, "Text") count;

#testcase -2.3- createRectangles2D, creating 10^3 tuples (reproducible)
#yields (int 1000)
query createRectangles2D(10, 3, 0.4, 0.6, 1) count;

#testcase -2.4- createRectangles2D, creating 5^4 tuples (non-reproducible)
#yields (int 625)
query createRectangles2D(5, 4, 0.3, 0.5, 0) count;

#testcase -2.5- createRectangles2D, checking first 3 of 1000^4 tuples
# tolerance_real 0.001
#yields ((rel (tuple ((Bbox rect))))( \
  ((618.075 661.112 822.866 867.504)) \
  ((631.791 675.070 811.430 863.197)) \
  ((653.610 701.446 809.708 846.568))))
query createRectangles2D(1000, 4, 0.4, 0.6, 1) head[3] consume;


########################################
# OPERATOR - createRectangles3D
########################################

#testcase -3.1- createRectangles3D with wrong number of parameters
#yields error
query createRectangles3D(10, 3, 0.4, 0.6, 1, 42) count;

#testcase -3.2- createRectangles3D with wrong type of parameters
#yields error
query createRectangles3D(10.0, 3.1415, 4, 6, "Text") count;

#testcase -3.3- createRectangles3D, creating 10^3 tuples (reproducible)
#yields (int 1000)
query createRectangles3D(10, 3, 0.4, 0.6, 1) count;

#testcase -3.4- createRectangles3D, creating 5^4 tuples (non-reproducible)
#yields (int 625)
query createRectangles3D(5, 4, 0.3, 0.5, 0) count;

#testcase -3.5- createRectangles3D, checking first 3 of 1000^4 tuples
#tolerance_real 0.001
#yields ((rel (tuple ((Bbox rect3))))( \
  ((694.327 750.894 897.878 950.151 422.922 463.201)) \
  ((697.523 752.664 872.098 926.557 431.964 471.596)) \
  ((694.567 744.474 870.262 916.680 401.140 445.207))))
query createRectangles3D(1000, 4, 0.4, 0.6, 1) head[3] consume;


########################################
# OPERATOR - CDACSpatialJoin
########################################

#testcase -4.1- CDACSpatialJoin with too many arguments
#yields error
query createRectangles2D(10, 4, 0.4, 0.6, 1) {a} createRectangles2D(10, 4, 0.4, 0.6, 2) {b} cdacspatialjoin[Bbox_a, Bbox_b, Bbox_c] count;

#testcase -4.1- CDACSpatialJoin with missing brackets
#yields error
query createRectangles2D(10, 4, 0.4, 0.6, 1) {a} createRectangles2D(10, 4, 0.4, 0.6, 2) {b} cdacspatialjoin count;

#testcase -4.3- CDACSpatialJoin with wrong type of arguments
#yields error
query [const int value 42] [const real value 3.1415] cdacspatialjoin[Bbox_a, Bbox_b] count;

#testcase -4.4- CDACSpatialJoin with invalid attribute names
#yields error
query createRectangles2D(10, 4, 0.4, 0.6, 1) {a} createRectangles2D(10, 4, 0.4, 0.6, 2) {b} cdacspatialjoin[Bbox_c, Bbox_d] count;

#testcase -4.5- CDACSpatialJoin with identical attribute names
#yields error
query createRectangles2D(10, 4, 0.4, 0.6, 1) createRectangles2D(10, 4, 0.4, 0.6, 2) cdacspatialjoin[Bbox, Bbox] count;

#testcase -4.6- CDACSpatialJoin with no spatial information in first stream
#yields error
query noGeom feed createRectangles2D(10, 4, 0.4, 0.6, 2) cdacspatialjoin[] count;

#testcase -4.7- CDACSpatialJoin with no spatial information in second stream
#yields error
query createRectangles2D(10, 4, 0.4, 0.6, 1) noGeom feed cdacspatialjoin[] count;

#testcase -4.8- CDACSpatialJoin with four valid arguments
#yields (longint 89843)
query createRectangles2D(10, 3, 0.4, 0.6, 1) {a} createRectangles2D(10, 3, 0.4, 0.6, 2) {b} cdacspatialjoin[Bbox_a, Bbox_b] count;

#testcase -4.9- CDACSpatialJoin with three valid arguments
#yields (longint 89843)
query createRectangles2D(10, 3, 0.4, 0.6, 1) {a} createRectangles2D(10, 3, 0.4, 0.6, 2) {b} cdacspatialjoin[Bbox_a] count;

#testcase -4.10- CDACSpatialJoin with two valid arguments
#yields (longint 89843)
query createRectangles2D(10, 3, 0.4, 0.6, 1) {a} createRectangles2D(10, 3, 0.4, 0.6, 2) {b} cdacspatialjoin[] count;

#testcase -4.11- compare CDACSpatialJoin result count (89.843) with spatialjoin result count
#yields (bool TRUE)
query (createRectangles2D(10, 3, 0.4, 0.6, 1) {a} createRectangles2D(10, 3, 0.4, 0.6, 2) {b} cdacspatialjoin[] count) 
    = (createRectangles2D(10, 3, 0.4, 0.6, 1) {a} createRectangles2D(10, 3, 0.4, 0.6, 2) {b} spatialjoin[Bbox_a, Bbox_b] count);

#testcase -4.12- compare CDACSpatialJoin result count (31.812) with itSpatialJoin result count
#yields (bool TRUE)
query (createRectangles2D(5, 5, 0.3, 0.5, 1) {a} createRectangles2D(8, 4, 0.2, 0.7, 2) {b} cdacspatialjoin[] count) 
    = (createRectangles2D(5, 5, 0.3, 0.5, 1) {a} createRectangles2D(8, 4, 0.2, 0.7, 2) {b} itSpatialJoin[Bbox_a, Bbox_b] count);

#testcase -4.13- compare CDACSpatialJoin result count (13.018) with cspatialjoin result count
#yields (bool TRUE)
query (createRectangles2D(4, 7, 0.4, 0.7, 1) {a} createRectangles2D(3, 9, 0.1, 0.8, 2) {b} cdacspatialjoin[] count)
    = (createRectangles2D(4, 7, 0.4, 0.7, 1) toblocks[1] {a} createRectangles2D(3, 9, 0.1, 0.8, 2) toblocks[1] {b} cspatialjoin[Bbox_a, Bbox_b] count);

#testcase -4.14- join 3D rectangles with 2D rectangles (z dimension is ignored)
#yields (longint 2806)
query createRectangles3D(10, 4, 0.2, 0.3, 1) createRectangles2D(10, 4, 0.2, 0.3, 2) {a} cdacspatialjoin[] count

#testcase -4.15- join 2D rectangles with 3D rectangles (z dimension is ignored)
#yields (longint 2806)
query createRectangles2D(10, 4, 0.2, 0.3, 2) createRectangles3D(10, 4, 0.2, 0.3, 1) {a} cdacspatialjoin[] count

#testcase -4.16- join 3D rectangles with 3D rectangles (z dimension is considered)
#yields (longint 29)
query createRectangles3D(10, 4, 0.2, 0.3, 1) createRectangles3D(10, 4, 0.2, 0.3, 2) {a} cdacspatialjoin[] count

#testcase -4.17- all 100 rectangles with int coordinates in interval [-2, 2] must intersect with the rectangle (-1, -1) - (1, 1)
#yields (longint 100)
query rect100 feed rect1 feed {a} cdacspatialjoin[] count;

#testcase -4.18- ... the same applies if positions are swapped
#yields (longint 100)
query rect1 feed rect100 feed {a} cdacspatialjoin[] count;

#testcase -4.19- ... and for the slightly larger rectangle (-1.00001, -1.00001) - (1.00001, 1.00001)
#yields (longint 100)
query rect100 feed rectOver1 feed {a} cdacspatialjoin[] count;

#testcase -4.20- ... and of course for the rectangle (-2, -2) - (2, 2)
#yields (longint 100)
query rect100 feed rect2 feed {a} cdacspatialjoin[] count;

#testcase -4.21- ... but only 64 of the 100 rectangles should intersect with the rectangle (-0.99999, -0.99999) - (0.99999, 0.99999)  
#yields (longint 64)
query rect100 feed rectBelow1 feed {a} cdacspatialjoin[] count;


#teardown
kill noGeom;
kill rectBelow1;
kill rect1;
kill rectOver1;
kill rect2;
kill rect100;
close database;
delete database CDACSJTest;
