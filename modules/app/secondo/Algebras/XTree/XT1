/*
//[_] [\_]
//characters      [1]   verbatim:   [$]   [$]
//characters      [2]   formula:    [$]   [$]
//characters      [3]   capital:    [\textsc{]  [}]
//characters      [4]   teletype:   [\texttt{]  [}]
//paragraph [11] Title: [{\Large \bf \begin{center}] [\end{center}}]
//paragraph [21]  table1column:     [\begin{quote}\begin{tabular}{l}]   [\end{tabular}\end{quote}]
//paragraph [22]  table2columns:    [\begin{quote}\begin{tabular}{ll}]  [\end{tabular}\end{quote}]
//paragraph [23]  table3columns:    [\begin{quote}\begin{tabular}{lll}] [\end{tabular}\end{quote}]
//paragraph [24]  table4columns:    [\begin{quote}\begin{tabular}{llll}][\end{tabular}\end{quote}]
//[--------]      [\hline]
//[TOC] [\tableofcontents]

[11] X-Tree Algebra

[TOC]
\newpage

1 Overview

This algebra provides the "xtree"[4] type constructor and the following operators ("DATA"[4] must be of the same type as the attributes indized in the x-tree or a hpoint):

  * "[_] creatextree [[_]]"[4]\\
    Creates a new xtree from a relation or tuple stream.\\[1ex]
    Signature: "relation/tuple-stream x <attr-name> -> xtree"[4]\\
    Example: "let xt = strassen creatextree[geoData]"[4]

  * "[_] creatextree2 [[_], [_]]"[4]\\
    Like creatextree, but additionaly allows to specify another than the default xtree config.\\[1ex]
    Signature: "relation/tuple-stream x <attr-name> x <config-name> -> xtree"[4]\\
    Example: "let xt = strassen creatextree2[geoData, limit80e]"[4]

  * "[_] creatextree3 [[_], [_], [_]]"[4]\\
    Like creatextree2, but additionaly allows to specify another than the default gethpoint or getbbox function (if a gethpoint and a getbbox function with the same name are defined, the gethpoint function will be used).\\[1ex]
    Signature: "relation/tuple-stream x <attr-name> x <config-name>\\ x <getdatafun-name> -> xtree"[4]\\
    Example: "let xt = strassen creatextree3[geoData, limit80e, native]"[4]

  * "[_] [_] rangesearch [[_], [_]]"[4]\\
    Returns all tuples of the relation, for which the indized entries lies inside the query range around the query attribute. The relation should be the same that had been used to create the tree.\\[1ex]
    Signature: "xtree relation x DATA x real -> tuple stream"[4]\\
    Example: "xt strassen rangesearch[p, 1000]"[4]

  * "[_] [_] nnsearch [[_], [_]]"[4]\\
    Returns all tuples of the relation, which for which the indized entries are the n nearest neigthbours of the query attribute. The relation should be the same that had been used to create the tree.\\[1ex]
    Signature: "xtree relation x DATA x int -> tuple stream"[4]\\
    Example: "xt strassen nnsearch[p, 5] count"[4]

  * "[_] [_] windowintersects [[_]]"[4]\\
    Returns all tuples of the relation, which for which the indized entries are the n nearest neigthbours of the query attribute. The relation should be the same that had been used to create the tree.\\[1ex]
    Signature: "xtree relation x hrect -> tuple stream"[4]\\
    Example: "xt strassen windowintersects[r] count"[4]

  * "[_] [_] nnscan [[_]]"[4]\\
     Returns a tuple stream, which contains the ranking of the indized elements, based on the distance to the query point. The relation must contain at least the same tuples, that had been used to create the xtree.\\[1ex]
    Signature: "xtree relation x DATA -> tuple stream"[4]\\
    Example: "xt strassen nnscan[p] head[ 10 ] count"[4]

*/
