package org.locationtech.jtstest.testbuilder;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JComponent;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import jni_st_mesh.ChartMaker;
import jni_st_mesh.Main;
import jni_st_mesh.ScreenImage;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.locationtech.jts.geom.MultiPolygon;

/**
 *This frame shows an animation of a geometry throught a period of time. It is possible to pause and play the animation
 * as well as manually animate the geometry, see charts with quality metrics and save the geometry
 */
public class MorphingGeometryViewerFrame extends javax.swing.JFrame {
    
    private MorphingGeometryPanel morphingGeoPanel;
    private boolean userChangedSlider = true;
    
    private MorphingGeometryViewerFrame(String[] wktGeometry) {
        initComponents();
        
        //get statistics and build a chart
        Main m = new Main();
        //TODO: replace with this one (to use the geometries on both panels)
        //double[] areaEV = m.area_EV(1000.0, 2000.0, wktGeometry[0], wktGeometry[1], 1000);
        double[] areaEV = m.area_EV(1000.0, 2000.0, "POLYGON((0 0, 0 8, 2 8, 2 2, 4 2, 4 8, 6 8, 6 0))", "POLYGON((6 8, 6 0, 4 0, 4 6, 2 6, 2 0, 0 0, 0 8))", 1000);
        this.showAreaEVChart(areaEV, 1000.0, 2000.0);
    }
    
    /**
     *
     * @param wktGeometry - array with wkt as string with the geometry on the first panel and the wkt of the geometry
     * in the second panel
     * @param mp - the result of the morphing of the geometries as a multipolygon, each polygon in an instant
     */
    public MorphingGeometryViewerFrame(String[] wktGeometry, MultiPolygon mp) {
        this(wktGeometry);
        this.morphingGeoPanel = new MorphingGeometryPanel(mp);
        startComponents();
        initMorphingPanel();
    }
    
    /**
     * @param wktGeometry - array with wkt as string with the geometry on the first panel and the wkt of the geometry
     * in the second panel
     * @param mpList - the result of the morphing of the geometries as a list of multipolygon,
     * each multipolygon being a mesh of triangles in an instant
     */
    public MorphingGeometryViewerFrame(String[] wktGeometry, List<MultiPolygon> mpList) {
        this(wktGeometry);
        this.morphingGeoPanel = new MorphingGeometryPanel(mpList);
        startComponents();
        initMorphingPanel();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        chartPanel = new javax.swing.JPanel();
        playBtn = new javax.swing.JButton();
        saveAsBtn = new javax.swing.JButton();
        timeSlider = new javax.swing.JSlider();
        pauseBtn = new javax.swing.JButton();
        metricsComboBox = new javax.swing.JComboBox<>();
        metricsLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        chartPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 15);
        getContentPane().add(chartPanel, gridBagConstraints);

        playBtn.setText("jButton1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(playBtn, gridBagConstraints);

        saveAsBtn.setText("jButton2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(saveAsBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 15);
        getContentPane().add(timeSlider, gridBagConstraints);

        pauseBtn.setText("jButton1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(pauseBtn, gridBagConstraints);

        metricsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(metricsComboBox, gridBagConstraints);

        metricsLabel.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(metricsLabel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void initMorphingPanel(){
        //add here the panel
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.CENTER;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 6.0;
        try{
            getContentPane().add(morphingGeoPanel, gridBagConstraints);
        } catch (NullPointerException ex){ }
    }
    
    /** Add text, values and listeners to the components of this panel.
     *
     */
    private void startComponents(){
        //initialize buttons
        this.saveAsBtn.setText(AppStrings.SAVE_AS_IMAGE_STRING);
        this.playBtn.setText(AppStrings.PLAY_STRING);
        this.pauseBtn.setText(AppStrings.PAUSE_STRING);
        //initialize combo box
        this.metricsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(AppStrings.METRICS_STRINGS));
        //initialize labels
        this.metricsLabel.setText(AppStrings.STATISTIC_LABEL_STRING);
        
        saveAsBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    //capture the panel with the chart and save as image
                    //TODO: create window prompt to save file:
                    //http://www.java2s.com/Code/Java/Swing-JFC/DemonstrationofFiledialogboxes.htm
                    ScreenImage.writeImage(ScreenImage.createImage(chartPanel), "C:\\Users\\bjpsi\\Desktop\\img.jpeg");
                } catch (IOException ex) {
                    Logger.getLogger(MorphingGeometryViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        playBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                morphingGeoPanel.play();
            }
        });
        
        pauseBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                morphingGeoPanel.pause();
            }
        });
        
        timeSlider.setModel(new DefaultBoundedRangeModel(1000, 1, 1000, 2000));//<-- temporary values!
        timeSlider.setMajorTickSpacing(2000/5);
        timeSlider.setPaintTicks(true);
        timeSlider.setPaintTicks(true);
        timeSlider.setPaintLabels(true);
        timeSlider.setLabelTable(timeSlider.createStandardLabels(2000/5));
        
        timeSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (userChangedSlider)
                    morphingGeoPanel.paintAtInstant(convertSliderValueToValue(timeSlider.getValue()));
            }
        });
        
        //add listener for when a frame in the animation changes and update the slider with the value for the new frame
        this.morphingGeoPanel.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent e) {
                if (e.getPropertyName().equals(AppConstants.PROPERTY_CHANGED_NAME)) {
                    userChangedSlider = false;
                    int value = Integer.parseInt(e.getNewValue().toString());
                    timeSlider.setValue(convertValueToSliderValue(value));
                    userChangedSlider = true;
                }
            }
        });
    }
    
    private void showAreaEVChart(double[] areaEV, double beginTime, double endTime){
        ChartPanel cp = ChartMaker.createLineChartAreaEV(areaEV, beginTime, endTime);
        //add the panel to the frame
        this.chartPanel.add(cp, BorderLayout.CENTER);
        chartPanel.validate();
    }
    
    /**
     * Convert a value (representing a frame) to a Slider value (representing an instant in time),
     * used to control the frame of the animation.
     * The values in the slider represent an instant in time and the frame of animation start at 0, so this method makes
     * the apropriate conversion so that the frame value becomes a time value
     * @param v - the frame number shown in the animation
     * @return - the instant in time that the frame belongs to
     */
    private int convertValueToSliderValue(int v){
        return 1000+v;
    }
    
    /**
     * Convert a Slider value (representing an instant in time) to a normal value (representing a frame),
     * used to control the frame of the animation.
     * The values in the slider represent an instant in time and the frame of animation start at 0, so this method makes
     * the apropriate conversion so that the time value becomes a frame value
     * @param v - the instant in time selected in the slider
     * @return - the frame number to be shown in the animation
     */
    private int convertSliderValueToValue(int v){
        return Math.abs(1000-v);
    }
    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel;
    private javax.swing.JComboBox<String> metricsComboBox;
    private javax.swing.JLabel metricsLabel;
    private javax.swing.JButton pauseBtn;
    private javax.swing.JButton playBtn;
    private javax.swing.JButton saveAsBtn;
    private javax.swing.JSlider timeSlider;
    // End of variables declaration//GEN-END:variables
}
